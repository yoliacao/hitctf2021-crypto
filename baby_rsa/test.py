from Crypto.Util.number import *
from gmpy2 import *
pk = (52, 
47782489586021221729935382562238217213800826152327617948974334325027793433971508995399461776417812670604694882926777607105164020070178881963632306169611641854448509182837621758791538269408388860349616761041456174827996858614494726877767399938809515247000929894281600963992080920650256329287847887064428158469516438206831721224607859023980203694210651902538562842945949404149023836218548894116477022953606370852246884414011363477543284815671096832245521762246149180260936985618856296642080245029837974725521906177900378634071571992373478242159162403228753252168867425697897820696887070051128304178291193132322824455442092893684929701869625045112839344191126228806117685809636908190595562295591835629941512331963039016185366202513504464795106031092314892430859175307526232632986110464780357940552264674214665391043812843917461961230679207586174459563057178720743465356337218948534837994061644332424634750340190113117958830588820626581860957277456320434445207368613679418733984291985618038226928033006640791987978775285182325347153201516936002001839296455263977479446850434913069389565277028444638437387429263495729274142916464752814676819557878779855996225208596159171827854923873570163767937947956753277454486339143489103105750331110111L,
433229619560374735022060612660487139311547277564407316269466855779330930804160973325703376198605206390912154427123102710354958367692760474727012214464298979098489170777185729836132968187705068687678796437447631516334893543456227545790012358063578349956636488453355182971532300478038635153420232589545761194907476691636706445176390661463152150169542241304542401678253873515488446133330974312465916350895130227137954122794991542025930903127027608739905609108321738139103065645651901833223353774916656293079960486497159730921219805951217073283062070931854507016733789164315751827862830668829125950364981217520865411859759718244136420504507997449935455788230060974032741364271601426191469331266168231203426316280988734802654397014768828735251891167507794161264913387252048434549271931367148180980260205843989153008044839641263127846901551223167574691783927938948745126094512037792728067785201012834153473172824948188352810070916677679450209134179624791196123158336411804834221293611075447043002901607162001357780058394706516204775756666576041740010288970758149528406172022049389998133360726123682741312251431519423867620962951022993364287241463507027520966721930799696555390707280246584903566049326608205785466271642132178515338520410658L, 
594494499417894774789048451572687632660208181953899084791149805130704950465573064455173172705283156011806901684972459390817538594318847879599780068410149543731305374894040638491310362570467887919519584736646557258917947483658649575357363123407313011773027073062592473100264464401987309633458687673513776139455296286685115396610808047870099635374955339289799615102534094497730932884838674370338192153202045642565170696704452991192684466848026383861073123033948004049599266417667125680356386669226827901570782628388996520826906941293858994180130505009152517646592286697346622724843482147801718703310671546709185342317509441259927498881276856470161174444209513355803640646947368551446328198695259259829546707119878154837158880677882305548928799964929213106969848547576414765380870575558771867763848114411251654245747231121164090765647221739709450477815688276801154266722035408374135871417564206013020997849375553619152730479571927135850379285559873197371293312934173379820835252091990919727655797413411368987930118553258247264348519581466374312010472449698571319621067244494880512957538208007914329691196084901181642263713183616896210154681618376310287185315262021479758282631576946335858068664109425856174388362174761355148787245515144L, 
261181509476485410165375351178418657075805043256124045823778754055035546150122155335065215645750231604267318872693494310557376958843829685914382636208107544361140482291909865660810395856913449414106045946602124226832733980696161639105193768954092281635195760991693212657816181524313660831938528737461195472275606167593968953647934279724693129491600232382201769523725243272086370087058597321533767924008747705935388941121530345216164771817150616453601212026925759807092457510188966636612860912597984231762129535299227711879953931847880037605415987083573556274570400085013894504645789376654166259691075373526751505971657856429187752015665407876751018316490729668209646098952144838144486106489379202197360745365239628186669447122272538227142855706247593556669905666428363734481409983627496127639634726855140379146669911302677456457202808949896992958886949162850488164457334796828240069980922051762068458877051063958308363343196940785994299643315504146607392461323382470475501119070077564995866998018505817611171892860136485534016608294708527673407517876647349723758712907513973353401204912431800080247493896815299218218930415151745986776831977527196435124521552249406640177674130330651411672455343809240941664288436809369136070604763156723L, 

size = 4096
next_state = getRandomInteger(size // 2)
secret = bytes_to_long("HITCTF2021{Numb3r_Th30ry_1s_Funny!}")
def keygen(size):
    q = getPrime(size)
    k = 2
    while True:
        p = q * k + 1
        if isPrime(p):
        	break
        k += 1
    g = 2
    while True:
        if pow(g, q, p) == 1:
            break
        g += 1
    A = getRandomInteger(size) % q
    B = getRandomInteger(size) % q
    d = getRandomInteger(size) % q
    h = pow(g, d, p)
    return (g, h, A, B, p, q)
def rand(A, B, M):
    global next_state
    next_state, ret = (B * next_state + A) % M, next_state
    return ret
def enc(pubkey, m):
    g, h, A, B, p, q = pubkey
    assert 0 < m <= p
    r = rand(A, B, q)
    return (m * pow(h, r, p)) % p

# pk = keygen(size)
# print(pk)
g, h, A, B, p, q = pk
# A = getRandomInteger(size) % q
# B = getRandomInteger(size) % q
# d = getRandomInteger(size) % q
# h = pow(g, d, p)
# print(A,B,h)
c0 = enc(pk, pow(secret,0xfaab,p))
c1= enc(pk, secret)
print(c0,c1)
# (c1,c2,c11,c22)=(146813951246918858630893235159159694736095856502406060036599494110629944358732836964367745122208006130940018990741429917476866536991997409279140402605027169895912523977547355590021520405942643620683986557032128287151459323511236977604676760980335370878995958145774474346357876492223271850095673164529428992955078966941589630234583287380959225210351221304825236261286015600325223225854007098532844648975945459780593374993990477606476604295999779663261971739491519831246165743480984969562423903222702913424909059744782054700751859191866386335104485101738117394595696733791738652980381772978214961001186980461948882991090842737151975588734802884470216166459372603785013785094175213357519075736977146053628112993961282470300411170356786702595248652716797136583172714913335824431512818415649259661886123648515906950318775025380846839986213302000466984831818220669138665849735146694299580852858229448412081304459083609111191832552208008717155038641929751318631729873801670790291469067377194443701910353901233685821629035992010788347212566568193693061643404433180341240557404667399344126541203872023298802617971788568220230461292326937984160141010984971884447389989703367002510313042712804111699295973541393444415188996726802424716419757426686L, 36271198328562803071666189676824137337936393315269966989133840534964274487573996849782132490906391768078739747040587954345960734984892874675626259176246278596738230076037824864712059460086747391167284115275215856791177552318299566178632107320700531289576273957889664925410889402946135704076595112963517288034881478028918381171248757043068242540644588101472407901202342839393277372997219403281997136180013991198140315915340941926527450177805171908365947723275849117976061397562382786123148029642625086852373916469100414575323889676211845898007200409986006858017947737506094028323585763636801860158522132263454460438386480825187901610277534332249028076650330541466882245160863058496025952378026595445229202052333501355684579360085138051091645156007671068178267713790595590429100615580924807098263220800882817373554407811347436822054401133760901854778677734639642613509333810024646238777480996940471869334604207145416334497166931637780072287075191107139419960191024404292102096220372248086432066547991286345699764674293780422083702790865693115727566648344684807971959825900007033873776662202735524057920651828650815394238582154113990289217092927694246767879529740938024274043266536841175301070096732685537949857825032639804350528987552211L, 58610266750217134740481386992457718317573710608875926107010955307994188488845059779772459469026185472838478466501785196502950958294042089426809985641891368708684388178745913649716761138856350946181416012859882761326074355157169775963875776568260343940185601074566773059002860618628349535688342687260573962080922769497409575922054855076639478097421464439187717401601340622537765195362912781015651356126500195426673992828159313717531336801181249846460861265659618714393971404972489920360103812110241263970146598089059978748311630679972067516399128281272982472094386312336476773813263671730571409500959042778663213348774891967565455131892043587002833161099826946387538156652946840411220833230023581363589953953606990906155761255703215978546794078864802111132548197381462893400868573019827228366849441794930027187286330196617749759168836173656679299174128484009177153125793154186744059304413229922238659212607434975166058061096692395151855295605944728075933141499080456545610843812140554326629951988698479986685829037353486192663521706925764044700836673669409623178727604495290594512716313842549637641742295827867648705882428936348640443639422719656996020844108870398230568673678205660921475686476567306325222003279955474064274350222631613L, 214038903068799170860431793404026449001144549351702746076506361623368484359056211842441610076667344360787961320598061655154713520950010690806415719017668359993141713488272308596042648340124003660320861913571470169746387151398227593991321050091559323880322083924957781234290844291105871311436669943736529818477726828876394016558759672058764814760241758121958192909174313615105441982976467742610374578602496178055236481986278379956187912516660227285285099735880145479352611727397467828680722380973596965699856162648869651390345307434723413856046940327213588072220679394180646126886387685295730926448839501492053356410363785884446929589436728322529758128781294264911863573876949012480334632655662354692769493170448305787399690312071109643441778511580684400893217112566379695153150737018648221073701689018234480865534753935369559694207747137894438571039842432835832430169050288078913359537897055981229648086326163957446673083054719718687351637973765986720044023212186176972398836627724559378349479261985028502674817900875317151767912185503249142798010046972551934423244439954780436285485975892617746500164519878196447653675831428563275510604715345895078532043482936614584760738731210834229763875563463696913498296167581998748210796511571715L)
# hr1 = pow(c22 * invert(c2, p) * invert(pow(h,A, p),p), invert(B-1, p-1), p)
# N = c2*invert(int(hr1), int(p)) % p
# print(N)
k0 = (c1 * invert(c0, p) * invert(pow(h,A, p),p))%p
k1 = invert(B-1, p-1)
y = (pow(c0,B,p)*pow(h,A,p)*invert(c1,p))%p
ee = (0xfaab*B-1)%(p-1)
# print((pow(c0,B,p)*pow(h,A,p)*invert(c1,p))%p==pow(secret,0xfaab*B-1,p))
# print(ee,y,p)
# print(ee)
# print(pow(secret,ee,p)==y)
d0=(invert(3,p-1))
d1=(invert(ee/3/167,p-1))
yy=pow(pow(y,d0,p),d1,p)
print(yy)
print(p)
print(secret)
print(pow(secret,167,p)==yy)
# c=(c0*pow(k0,invert(k1,p),p))%p
# ee = ((k1+1)*0x10001-k1)%(p-1)
# print(ee,c)
# print(pow(secret,ee,p)==c)
